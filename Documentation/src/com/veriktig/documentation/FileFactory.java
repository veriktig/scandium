/*
 * Copyright 2018 Veriktig, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.veriktig.documentation;

import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.util.Scanner;
import java.io.IOException;

public class FileFactory {
    protected final static String copyright = new String(
        "// Copyright (c) 2018 Veriktig.  All rights reserved."
    );

    protected final static String doNotEdit = new String(
        "// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT"
    );
    protected final static String startSection = new String(
            "// START AUTOMATICALLY GENERATED SECTION"
    );
    protected final static String endSection = new String(
            "// END AUTOMATICALLY GENERATED SECTION"
    );
    // Style - Change this to adjust the indent. 0 = One level, 1 = No indent
    private int INITIAL_INDENT = 0;
    private int LINE_WRAP = 75;
    public PrintWriter out;
    public String indent = new String("    ");
    public String package_name;

    public FileFactory() {
    }

    public PrintWriter createOut(File fd, boolean preserve) {
        // If fd exists and preserve, don't do anything
        if (fd.exists() && preserve) {
            return (null);
        }
        // If fd exists and !preserve, delete it
        if (fd.exists() && !preserve) {
            fd.delete();
        }

        // Check if the path exists. If not, create the directories.
        try {
            if (!fd.exists()) {
                String parent = fd.getParent();
                if (parent != null) {
                    File dir = new File(parent);
                    dir.mkdirs();
                }
                fd.createNewFile();
            }
        } catch (SecurityException se) {
            System.err.println("ERROR: Unable to create: " + fd + " : " + se.getMessage());
            System.exit(-1);
        } catch (IOException ie) {
            System.err.println("ERROR: Unable to create PrintWriter: " + ie.getMessage());
            System.exit(-1);
        }

        try {
            out = new PrintWriter(new BufferedWriter(new FileWriter(fd)));
        } catch (IOException ie) {
            System.err.println("ERROR: Unable to create PrintWriter: " + ie.getMessage());
            System.exit(-1);
        }
        return (out);
    }

    public void done() {
        out.flush();
        out.close();
    }

    public void outputClassHeader(String package_name, String file_name) {
        if (out == null) {
            System.err.println("ERROR: createOut() before using outputClassHeader().");
            System.exit(-1);
        }

        out.println("// " + copyright);
        out.println("");
        out.println("// " + doNotEdit);
        out.println("");
        out.println("package " + package_name);
        out.println("");
        out.println("import java.util.ListResourceBundle;");
        out.println("");
        out.println("public class " + file_name + " extends ListResourceBundle {");
        printIndented(1, "protected Object[][] getContents() {");
        printIndented(2, "return new Object[][] {");
    }

    public void outputClassFooter() {
        if (out == null) {
            System.err.println("ERROR: createOut() before using outputPackageFooter().");
            System.exit(-1);
        }

        printIndented(2, "};");
        printIndented(1, "}");
        out.println("}");
        out.flush();
        out.close();
    }

    public void printIndent(int level) {
        for (int ii = INITIAL_INDENT; ii < level; ii++) {
            out.print(indent);
        }
    }

    public void printIndent(int level, int offset) {
        for (int ii = INITIAL_INDENT; ii < level + offset; ii++) {
            out.print(indent);
        }
    }

    public void printIndented(int level, String line) {
        printIndent(level);
        out.println(line);
    }
    
    public void print(String line) {
    	out.println(line);
    }

    @SuppressWarnings("resource")
	public void addComments(boolean sw, int level, String comments) {
        String word;
        String line = new String();

        if (comments != null) {
            if (comments.equals("")) {
                return;
            }
            if (comments.length() <= LINE_WRAP) {
                printIndent(level);
                if (!sw) {
                    out.print("//");
                } else {
                    out.print("/*");
                }
                Scanner nws = new Scanner(comments);
                while (nws.hasNext()) {
                    word = nws.next();
                    out.print(" " + word);
                }
                if (!sw) {
                    out.println(" ");
                } else {
                    out.println(" */");
                }
                return;
            } else {
                printIndent(level);
                if (!sw) {
                    out.println("//");
                } else {
                    out.println("/*");
                }
                // Trim extra whitespace and
                // chop to 80 characters per line
                Scanner nws = new Scanner(comments);
                int length = 0;
                while (nws.hasNext()) {
                    word = nws.next();
                    length = length + word.length() + 1;
                    if (length <= LINE_WRAP) {
                        line = line.concat(" " + word);
                    } else {
                        printIndent(level);
                        if (!sw) {
                            out.println("//" + line);
                        } else {
                            out.println(" *" + line);
                        }
                        line = new String(" " + word);
                        length = word.length() + 1;
                    }
                }
                if (line.length() != 0) {
                    printIndent(level);
                    if (!sw) {
                        out.println("//" + line);
                    } else {
                        out.println(" *" + line);
                    }
                }
            }
            printIndent(level);
            if (!sw) {
                out.println("//");
            } else {
                out.println(" */");
            }
        }
    }

}
